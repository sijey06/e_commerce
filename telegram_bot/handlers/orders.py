import aiohttp
from aiogram.types import CallbackQuery
from aiogram_dialog import DialogManager

from handlers.item_cart import CartService
from handlers.users import UserService
from states.main import MainSG


class OrderService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–æ–≤."""

    def __init__(self, api_url, user_service: UserService,
                 cart_service: CartService):
        self.api_url = api_url
        self.user_service = user_service
        self.cart_service = cart_service

    async def order_confirmation_getter(self,
                                        dialog_manager: DialogManager,
                                        **kwargs):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ—Ä–∑–∏–Ω—ã
        –¥–ª—è –æ–∫–Ω–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.
        """
        user_data = await self.user_service.get_user(
            dialog_manager.event.from_user.id)
        chat_id = dialog_manager.event.from_user.id
        async with aiohttp.ClientSession() as session:
            cart_data = await self.cart_service.fetch_cart(session, chat_id)
        if not cart_data.get("cart_items"):
            return {"item_list": "–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞"}
        result = []
        grand_total = sum(
            [item['total_price'] for item in cart_data['cart_items']])
        for idx, item in enumerate(cart_data['cart_items'], start=1):
            formatted_item = (
                f"{idx}. ‚ú® {item['product']['name']}\n"
                f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {item['quantity']}\n"
                f"üí∏ –°—Ç–æ–∏–º–æ—Å—Ç—å: {item['total_price']} ‚ÇΩ\n"
            )
            result.append(formatted_item)
        return {
            "user": user_data,
            "item_list": "\n".join(result),
            "total_price": grand_total
        }

    async def create_order(self, dialog_manager: DialogManager):
        """–§–æ—Ä–º–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–∫–∞–∑ –Ω–∞ —Å–µ—Ä–≤–µ—Ä."""
        user_data = await self.user_service.get_user(
            dialog_manager.event.from_user.id)
        payload = {
            "first_name": user_data["first_name"],
            "address": user_data["address"],
            "phone_number": str(user_data["phone_number"]),
            "chat_id": dialog_manager.event.from_user.id,
            "status": "–ù–û–í–´–ô"
        }
        async with aiohttp.ClientSession() as session:
            async with session.post(f"{self.api_url}/orders/",
                                    json=payload) as resp:
                if resp.status == 200:
                    return True
                return False

    async def confirm_order_handler(self, query: CallbackQuery,
                                    button, manager: DialogManager):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑'."""
        success = await self.create_order(manager)
        if success:
            await manager.switch_to(MainSG.confirmation)
        else:
            await query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞.",
                               show_alert=True)

    async def fetch_orders(self, session, chat_id):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        async with session.get(f"{self.api_url}/orders/{chat_id}") as response:
            if response.status == 200:
                return await response.json()
            return []

    async def my_orders_getter(self, dialog_manager: DialogManager, **kwargs):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫—Ä–∞—Å–∏–≤—É—é –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        chat_id = dialog_manager.event.from_user.id
        async with aiohttp.ClientSession() as session:
            orders = await self.fetch_orders(session, chat_id)

        if len(orders) == 0:
            return {"orders": "üìÇ –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤ –ø—É—Å—Ç–∞"}

        result = []
        for order in orders:
            ordered_products = order.get("ordered_products", [])
            products_list = []
            for product in ordered_products:
                product_info = (
                    f"‚ú® {product['name']}: üí∏ {product['price']} ‚ÇΩ\n"
                )
                products_list.append(product_info)

            order_details = (
                f"üì£ –ó–∞–∫–∞–∑ ‚Ññ {order['number']}\n"
                f"üìù –°—Ç–∞—Ç—É—Å: {order['status']}\n"
                f"üõ†Ô∏è –¢–æ–≤–∞—Ä–æ–≤: {len(ordered_products)} —à—Ç.\n"
                f"{''.join(products_list)}"
                f"üí≥ –°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {order['total_amount']} ‚ÇΩ\n"
            )
            result.append(order_details)

        return {"orders": '\n\n'.join(result)}
