import aiohttp
from aiogram.types import CallbackQuery
from aiogram_dialog import DialogManager

from states.main import MainSG


class CartService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ—Ä–∑–∏–Ω–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ REST API."""

    def __init__(self, api_url):
        self.api_url = api_url

    async def add_to_cart(self, session, product_id, quantity, chat_id):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É."""
        url = f"{self.api_url}/item-cart/"
        payload = {
            "product_id": product_id,
            "quantity": quantity,
            "chat_id": chat_id
        }
        async with session.post(url, json=payload) as resp:
            return resp.status == 200

    async def fetch_cart(self, session, chat_id):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ chat_id."""
        url = f"{self.api_url}/item-cart/{chat_id}"
        async with session.get(url) as resp:
            if resp.status == 200:
                return await resp.json()
            return None

    async def handle_add_to_cart(self, query: CallbackQuery,
                                 button, manager: DialogManager):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ '–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É'."""
        product_id = manager.current_context().dialog_data.get("product_id")
        chat_id = query.from_user.id
        async with aiohttp.ClientSession() as session:
            success = await self.add_to_cart(session, product_id, 1, chat_id)
        message = ("–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!"
                   if success else "–û—à–∏–±–∫–∞. –¢–æ–≤–∞—Ä –Ω–µ –¥–æ–±–∞–≤–∏–ª—Å—è.")
        await query.bot.send_message(chat_id, message)
        await query.answer("")

    async def cart_getter(self, dialog_manager: DialogManager, **kwargs):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ."""
        chat_id = dialog_manager.event.from_user.id
        async with aiohttp.ClientSession() as session:
            cart_data = await self.fetch_cart(session, chat_id)
        return cart_data or {}

    async def get_item_cart(self, dialog_manager: DialogManager, **kwargs):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ."""
        cart_data = await self.cart_getter(dialog_manager)
        if not cart_data.get("cart_items"):
            return {"products": "–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞"}
        result = []
        grand_total = sum(
            [item['total_price'] for item in cart_data['cart_items']])
        for idx, item in enumerate(cart_data['cart_items'], start=1):
            category_name = item['product'].get(
                'category', {}).get('name', '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞')
            formatted_item = (
                f"{idx}. ‚ûï {item['product']['name']}\n"
                f"üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {item['product']['description']}\n"
                f"üõ†Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}\n"
                f"üìä –ö–æ–ª-–≤–æ: {item['quantity']}\n"
                f"üí∏ –¶–µ–Ω–∞: {item['total_price']} ‚ÇΩ\n"
            )
            result.append(formatted_item)
        total_line = f"üí≥ –û–±—â–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {grand_total:.2f} ‚ÇΩ"
        result.append(total_line)
        return {"products": "\n\n".join(result)}

    async def get_edit_cart_data(self,
                                 dialog_manager: DialogManager, **kwargs):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ –¥–ª—è –æ–∫–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
        chat_id = dialog_manager.event.from_user.id
        async with aiohttp.ClientSession() as session:
            cart_data = await self.fetch_cart(session, chat_id)
        return {"cart_items": cart_data.get("cart_items", [])}

    async def selected_item(self, call: CallbackQuery, widget,
                            manager: DialogManager, item_id):
        """–í—ã–±–∏—Ä–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –∫–æ—Ä–∑–∏–Ω—ã –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
        cart_data = await self.get_edit_cart_data(manager)
        selected_item = next(
            (i for i in cart_data["cart_items"] if i["id"] == int(item_id)),
            None)
        if not selected_item:
            raise ValueError("–≠–ª–µ–º–µ–Ω—Ç –∫–æ—Ä–∑–∏–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω")
        manager.current_context().dialog_data[
            "current_item_id"] = str(selected_item["product"]["id"])
        await manager.switch_to(MainSG.edit_cart_product)

    async def product_detail_getter(self,
                                    dialog_manager: DialogManager, **kwargs):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ."""
        current_item_id = dialog_manager.current_context().dialog_data.get(
            "current_item_id")
        cart_data = await self.get_edit_cart_data(dialog_manager)
        item = next(
            (i for i in cart_data[
                "cart_items"
                ] if i["product"]["id"] == int(current_item_id)), None)
        if not item:
            raise ValueError("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return {"item": item}

    async def delete_item(self, call: CallbackQuery,
                          widget, manager: DialogManager):
        """–£–¥–∞–ª—è–µ—Ç —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã."""
        chat_id = manager.event.from_user.id
        product_id = manager.current_context().dialog_data.get(
            "current_item_id")
        async with aiohttp.ClientSession() as session:
            url = f"{self.api_url}/item-cart/{chat_id}/{product_id}"
            async with session.delete(url) as resp:
                if resp.status == 200:
                    await call.message.reply(
                        "–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã.")
                    await manager.switch_to(MainSG.item_cart)
                else:
                    await call.message.edit_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞.")

    async def change_quantity(self, call: CallbackQuery,
                              widget, manager: DialogManager):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç —Ñ–æ—Ä–º—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞."""
        await manager.switch_to(MainSG.change_quantity)

    async def change_quantity_submit(self, call: CallbackQuery,
                                     widget, manager: DialogManager,
                                     new_value):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ."""
        chat_id = call.from_user.id
        item_id = manager.current_context().dialog_data.get("current_item_id")
        cart_data = await self.get_edit_cart_data(manager)
        cart_items = cart_data.get("cart_items", [])
        current_item = next(
            (item for item in cart_items if int(item["id"]) == int(item_id)),
            None)
        product_id = current_item["product"]["id"]
        async with aiohttp.ClientSession() as session:
            url = f"{self.api_url}/item-cart/{chat_id}/{product_id}"
            async with session.put(url, json={"quantity": new_value}) as resp:
                if resp.status == 200:
                    await call.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ.")
                    await manager.switch_to(MainSG.item_cart)
                else:
                    await call.answer(
                        "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞.")
