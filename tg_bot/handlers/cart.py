from typing import Union

import aiohttp
from aiogram import F
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message
from aiogram.utils.keyboard import InlineKeyboardBuilder

from app import dp
from api_client import fetch
from config import FAST_API_BASE_URL


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É
@dp.callback_query(F.data.contains("addtocart_"))
async def add_to_cart(callback_query: CallbackQuery):
    if not isinstance(callback_query.message, Message):
        return
    if (callback_query.data is None or
            not callback_query.data.startswith('addtocart_')):
        await callback_query.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞.",
                                    show_alert=True)
        return
    product_id_str = callback_query.data.split('_')[1]
    try:
        product_id = int(product_id_str)
    except ValueError:
        await callback_query.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –ø—Ä–æ–¥—É–∫—Ç–∞.",
                                    show_alert=True)
        return
    chat_id = callback_query.from_user.id
    quantity = 1

    payload = {
        "product_id": product_id,
        "quantity": quantity,
        "chat_id": chat_id
    }
    print(payload)

    api_endpoint = f"{FAST_API_BASE_URL}/item-cart/"
    async with aiohttp.ClientSession() as session:
        async with session.post(api_endpoint, json=payload) as response:
            if response.status == 200:
                result = await response.json()
                await callback_query.answer(
                    result.get("message", "–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É."))
            else:
                await callback_query.answer(
                    "–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É.", show_alert=True)


# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ—Ä–∑–∏–Ω—É"
@dp.callback_query(F.data == "edit_cart")
async def edit_cart_handler(callback_query: CallbackQuery, state: FSMContext):
    user_chat_id = callback_query.from_user.id
    cart_url = f"{FAST_API_BASE_URL}/item-cart/{user_chat_id}"
    cart_data = await fetch(cart_url)
    cart_items = cart_data.get("cart_items", [])

    if len(cart_items) > 0:
        product_ids = [item['product_id'] for item in cart_items]
        await state.update_data(product_ids=product_ids)

        keyboard_builder = InlineKeyboardBuilder()
        for item in cart_items:
            product_url = f"{FAST_API_BASE_URL}/products/{item['product_id']}"
            product = await fetch(product_url)
            button_text = f"{product['name']} ({item['quantity']}) üì¶"
            keyboard_builder.button(
                text=button_text,
                callback_data=f"edit_product_{item['product_id']}")
        keyboard_builder.button(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_home")
        keyboard_builder.adjust(1)

        await callback_query.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
            reply_markup=keyboard_builder.as_markup()
        )
    else:
        await callback_query.message.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@dp.callback_query(F.data.contains("edit_product_"))
async def edit_product_handler(callback_query: CallbackQuery):
    _, raw_product_id = callback_query.data.split("_")[1:]
    try:
        product_id = int(raw_product_id)
    except ValueError:
        await callback_query.message.edit_text(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ–≤–∞—Ä–µ.")
        return
    product_url = f"{FAST_API_BASE_URL}/products/{product_id}"
    product = await fetch(product_url)
    user_chat_id = callback_query.from_user.id
    cart_url = (
        f"{FAST_API_BASE_URL}/item-cart/"
        f"{user_chat_id}?product_id={product_id}"
    )
    cart_response = await fetch(cart_url)
    cart_items = cart_response.get("cart_items", [])
    found_item = next(
        (item for item in cart_items if item.get("product_id") == product_id),
        None)
    if found_item:
        quantity_in_cart = found_item.get("quantity", 0)
    else:
        quantity_in_cart = 0

    if product is None or 'name' not in product or 'price' not in product:
        await callback_query.message.edit_text(
            "–¢–æ–≤–∞—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
        return
    keyboard_builder = InlineKeyboardBuilder()
    keyboard_builder.button(text="üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ",
                            callback_data=f"change_qty_{product_id}")
    keyboard_builder.button(text="‚ùå –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä",
                            callback_data=f"remove_product_{product_id}")
    keyboard_builder.button(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_home")
    keyboard_builder.adjust(1)

    await callback_query.message.edit_text(
        f"–¢–æ–≤–∞—Ä: {product['name']}\n"
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity_in_cart}\n"
        f"–¶–µ–Ω–∞: {product['price']} —Ä—É–±.\n\n"
        f"–í—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ?",
        reply_markup=keyboard_builder.as_markup()
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞
@dp.callback_query(F.data.contains("change_qty_"))
async def change_quantity_handler(callback_query: CallbackQuery,
                                  state: FSMContext):
    _, product_id = callback_query.data.split("_")[1:]
    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞:")
    await state.update_data(changing_product_id=product_id)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
@dp.callback_query(F.data.contains("remove_product_"))
async def remove_product_handler(callback_query: CallbackQuery):
    _, product_id = callback_query.data.split("_")[1:]
    chat_id = callback_query.from_user.id

    api_endpoint = f"{FAST_API_BASE_URL}/item-cart/{chat_id}/{product_id}"
    async with aiohttp.ClientSession() as session:
        async with session.delete(api_endpoint) as response:
            if response.status == 200:
                await callback_query.message.answer(
                    "–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã.")
                await show_cart(callback_query.message, chat_id)
            else:
                await callback_query.message.answer(
                    "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞
@dp.message(lambda m: m.text.isdigit())
async def process_new_quantity(message: Message, state: FSMContext):
    new_quantity = int(message.text)
    product_id = (await state.get_data()).get("changing_product_id")
    chat_id = message.from_user.id
    payload = {"quantity": new_quantity}
    api_endpoint = f"{FAST_API_BASE_URL}/item-cart/{chat_id}/{product_id}"
    async with aiohttp.ClientSession() as session:
        async with session.put(api_endpoint, json=payload) as response:
            if response.status == 200:
                await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")
                await show_cart(message, chat_id)
            else:
                await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞.")
    await state.clear()


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã
async def show_cart(message: Union[Message, CallbackQuery], chat_id: int):
    cart_url = f"{FAST_API_BASE_URL}/item-cart/{chat_id}"
    cart_data = await fetch(cart_url)
    cart_items = cart_data.get("cart_items", [])
    total_amount = cart_data.get("grand_total", 0)

    if len(cart_items) > 0:
        cart_list = []
        for item in cart_items:
            product_url = f"{FAST_API_BASE_URL}/products/{item['product_id']}"
            product = await fetch(product_url)
            cart_list.append(f"""
- –¢–æ–≤–∞—Ä: {product['name']},
–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {item['quantity']},
—Å—É–º–º–∞: {item['total_price']} —Ä—É–±.
""")

        cart_keyboard = InlineKeyboardBuilder()
        cart_keyboard.button(text="‚úÖ –ó–∞–∫–∞–∑–∞—Ç—å", callback_data="order")
        cart_keyboard.button(text="üñä –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ—Ä–∑–∏–Ω—É",
                             callback_data="edit_cart")
        cart_keyboard.button(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_home")
        cart_keyboard.adjust(2)

        await message.answer(
            "\n".join([
                "–í–∞—à –∑–∞–∫–∞–∑:",
                *cart_list,
                f"\n–û–±—â–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {total_amount} —Ä—É–±."
            ]),
            reply_markup=cart_keyboard.as_markup(),
            parse_mode='HTML'
        )
    else:
        await message.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
